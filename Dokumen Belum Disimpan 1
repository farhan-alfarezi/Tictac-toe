<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe vs AI</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            height: 100vh;
            margin: 0;
            padding: 20px;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        
        .status {
            margin: 20px 0;
            font-size: 24px;
            font-weight: bold;
            color: #e74c3c;
        }
        
        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-gap: 10px;
            background-color: #2c3e50;
            padding: 10px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .cell {
            width: 100px;
            height: 100px;
            background-color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 40px;
            cursor: pointer;
            border-radius: 5px;
            transition: all 0.3s ease;
        }
        
        .cell:hover {
            background-color: #f1f1f1;
            transform: scale(1.05);
        }
        
        .cell-x {
            color: #e74c3c;
        }
        
        .cell-o {
            color: #3498db;
        }
        
        button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        button:hover {
            background-color: #27ae60;
            transform: translateY(-2px);
        }
        
        .difficulty {
            margin: 10px 0;
        }
        
        .difficulty select {
            padding: 5px;
            border-radius: 4px;
        }
        
        .scores {
            margin: 10px 0;
            display: flex;
            gap: 15px;
        }
        
        @media (max-width: 400px) {
            .cell {
                width: 80px;
                height: 80px;
                font-size: 30px;
            }
        }
    </style>
</head>
<body>
    <h1>Tic Tac Toe vs AI</h1>
    <div class="difficulty">
        <h3>Level Kesulitan:</h3>
        <select id="difficulty">
            <option value="easy">Mudah</option>
            <option value="medium" selected>Sedang</option>
            <option value="hard">Sulit</option>
        </select>
    </div>
    <div class="scores">
        <span>Kamu: <span id="player-score">0</span></span>
        <span>AI: <span id="ai-score">0</span></span>
        <span>Seri: <span id="draw-score">0</span></span>
    </div>
    <div class="status" id="status">Giliranmu (X)</div>
    <div class="board" id="board">
        <!-- Papan permainan akan diisi oleh JavaScript -->
    </div>
    <button id="reset">Mulai Ulang Permainan</button>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const board = document.getElementById('board');
            const status = document.getElementById('status');
            const resetButton = document.getElementById('reset');
            
            let currentPlayer = 'X';
            let gameState = ['', '', '', '', '', '', '', '', ''];
            let gameActive = true;
            let playerScore = 0;
            let aiScore = 0;
            let drawScore = 0;
            let difficulty = 'medium'; // Default medium difficulty
            
            // Kondisi menang
            const winningConditions = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // baris
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // kolom
                [0, 4, 8], [2, 4, 6]             // diagonal
            ];
            
            // Inisialisasi papan
            function initializeBoard() {
                board.innerHTML = '';
                for (let i = 0; i < 9; i++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.setAttribute('data-index', i);
                    cell.addEventListener('click', handleCellClick);
                    board.appendChild(cell);
                }
            }
            
            // Handle klik sel
            function handleCellClick(e) {
                const clickedCell = e.target;
                const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));
                
                // Jika sel sudah terisi atau game tidak aktif, abaikan
                if (gameState[clickedCellIndex] !== '' || !gameActive) {
                    return;
                }
                
                // Update game state
                gameState[clickedCellIndex] = currentPlayer;
                clickedCell.textContent = currentPlayer;
                clickedCell.classList.add(`cell-${currentPlayer.toLowerCase()}`);
                
                // Cek kemenangan atau seri
                checkResult();
                
                // Ganti giliran ke AI jika game masih aktif
                if (gameActive && currentPlayer === 'X') {
                    currentPlayer = 'O';
                    status.textContent = 'Giliran AI (O)';
                    
                    // Beri sedikit jeda sebelum AI bergerak
                    setTimeout(() => {
                        makeAIMove();
                        checkResult();
                    }, 500);
                }
            }
            
            // AI membuat langkah
            function makeAIMove() {
                // Algoritma minimax sederhana
                const bestMove = findBestMove();
                gameState[bestMove] = 'O';
                
                const cells = document.querySelectorAll('.cell');
                cells[bestMove].textContent = 'O';
                cells[bestMove].classList.add('cell-o');
                
                currentPlayer = 'X';
                status.textContent = 'Giliranmu (X)';
            }
            
            // Cari langkah terbaik untuk AI menggunakan algoritma minimax
            function findBestMove() {
                const difficulty = document.getElementById('difficulty').value;
                
                if (difficulty === 'easy') {
                    return easyAIMove();
                } else if (difficulty === 'medium') {
                    return mediumAIMove();
                } else {
                    return hardAIMove();
                }
            }
            
            function easyAIMove() {
                // AI mudah hanya membuat langkah acak
                const emptyCells = gameState.map((cell, index) => cell === '' ? index : null)
                    .filter(val => val !== null);
                return emptyCells[Math.floor(Math.random() * emptyCells.length)];
            }
            
            function mediumAIMove() {
                // AI sedang dengan beberapa strategi dasar
                // Cek kemenangan atau blokir jika mungkin
                for (let i = 0; i < gameState.length; i++) {
                    if (gameState[i] === '') {
                        gameState[i] = 'O';
                        if (checkWinner() === 'O') {
                            gameState[i] = '';
                            return i;
                        }
                        gameState[i] = '';
                    }
                }
                
                // Blokir pemain jika akan menang
                for (let i = 0; i < gameState.length; i++) {
                    if (gameState[i] === '') {
                        gameState[i] = 'X';
                        if (checkWinner() === 'X') {
                            gameState[i] = '';
                            return i;
                        }
                        gameState[i] = '';
                    }
                }
                
                // Jika tidak ada yang urgent, buat langkah acak
                const emptyCells = gameState.map((cell, index) => cell === '' ? index : null)
                    .filter(val => val !== null);
                return emptyCells[Math.floor(Math.random() * emptyCells.length)];
            }
            
            function hardAIMove() {
                // Cek apakah AI bisa menang di langkah selanjutnya
                for (let i = 0; i < gameState.length; i++) {
                    if (gameState[i] === '') {
                        gameState[i] = 'O';
                        if (checkWinner() === 'O') {
                            gameState[i] = '';
                            return i;
                        }
                        gameState[i] = '';
                    }
                }
                
                // Cek apakah pemain bisa menang di langkah selanjutnya dan blokir
                for (let i = 0; i < gameState.length; i++) {
                    if (gameState[i] === '') {
                        gameState[i] = 'X';
                        if (checkWinner() === 'X') {
                            gameState[i] = '';
                            return i;
                        }
                        gameState[i] = '';
                    }
                }
                
                // Ambil tengah jika tersedia
                if (gameState[4] === '') return 4;
                
                // Ambil sudut acak jika tersedia
                const corners = [0, 2, 6, 8];
                const availableCorners = corners.filter(index => gameState[index] === '');
                if (availableCorners.length > 0) {
                    return availableCorners[Math.floor(Math.random() * availableCorners.length)];
                }
                
                // Ambil sisi acak jika tersedia
                const sides = [1, 3, 5, 7];
                const availableSides = sides.filter(index => gameState[index] === '');
                if (availableSides.length > 0) {
                    return availableSides[Math.floor(Math.random() * availableSides.length)];
                }
                
                // Jika semua penuh (seharusnya tidak terjadi karena sudah dicek seri sebelumnya)
                return 0;
            }
            
            // Cek pemenang
            function checkWinner() {
                for (let i = 0; i < winningConditions.length; i++) {
                    const [a, b, c] = winningConditions[i];
                    if (gameState[a] && gameState[a] === gameState[b] && gameState[a] === gameState[c]) {
                        return gameState[a];
                    }
                }
                return null;
            }
            
            // Cek hasil permainan (menang/seri)
            function checkResult() {
                const winner = checkWinner();
                if (winner) {
                    gameActive = false;
                    if (winner === 'X') {
                        status.textContent = 'Kamu Menang!';
                        playerScore++;
                        document.getElementById('player-score').textContent = playerScore;
                    } else {
                        status.textContent = 'AI Menang!';
                        aiScore++;
                        document.getElementById('ai-score').textContent = aiScore;
                    }
                    return;
                }
                
                // Cek seri
                if (!gameState.includes('')) {
                    gameActive = false;
                    status.textContent = 'Permainan Seri!';
                    drawScore++;
                    document.getElementById('draw-score').textContent = drawScore;
                }
            }
            
            // Reset permainan
            function resetGame() {
                currentPlayer = 'X';
                gameState = ['', '', '', '', '', '', '', '', ''];
                gameActive = true;
                status.textContent = 'Giliranmu (X)';
                initializeBoard();
            }
            
            // Event listener untuk tombol reset
            resetButton.addEventListener('click', resetGame);
            
            // Handler untuk perubahan tingkat kesulitan
            document.getElementById('difficulty').addEventListener('change', () => {
                currentPlayer = 'X';
                gameState = ['', '', '', '', '', '', '', '', ''];
                gameActive = true;
                status.textContent = 'Giliranmu (X)';
                initializeBoard();
            });
            
            // Mulai permainan pertama kali
            initializeBoard();
        });
    </script>
</body>
</html>
